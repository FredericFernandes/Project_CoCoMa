__includes ["parser.nls"]

patches-own [
  _color
]

breed[objects object]
objects-own [
  object-name
  object-vertices  
  object-triangles
]

breed[vertices vertex]
vertices-own [
  original-x
  original-y
  original-z
]

breed[triangles triangle]
triangles-own [
  triangle-a 
  triangle-b
  triangle-c
]

undirected-link-breed [edges edge]

;
; imports filename as wireframe into netlogo, using the above types
;
to import-obj[filename]
  carefully 
  [
    reset-timer
    ;start-import
    print "Please wait ... "
    file-open filename  
    ;start-object filename
    while[not file-at-end?][
      let line trim file-read-line
      ;print line    
      if not empty? line [
        let points tokenize line " "      
        let command item 0 points
        if command = "o" [
          parse-object points
        ]
        if command = "v" [
          parse-vertex points
        ]
        if command = "f" [
          parse-face points
        ]
      ]
    ]
    end-object
  ]
  [
    print error-message 
  ]  
  file-close
  update-object-names
  print "end reading file"
  print (word "reading during: " timer " secs ")
end

to update-object-names 
  let object-names [object-name] of objects
  goo:set-chooser-items "choose-an-object" []
  goo:set-chooser-items "choose-an-object" object-names
end

;to start-import
;  print (word "starting new import...")
;  clear-all
;end 

to start-object[name]
 print (word "start object : "name)
  create-objects 1 [
    set hidden? true
    set object-name name
    set object-vertices []
    set object-triangles []
    set current-object self
  ]  
end

to end-object
  ;print (word "ending object " [object-name] of current-object)
  ;print (word "(" [length object-vertices] of current-object " vertices and " [length object-triangles] of current-object " faces )")    
end
 
to parse-object [points]
  end-object
  start-object item 1 points
end

to parse-vertex [points]
  let x runresult item 1 points        ; 1  ; 1
  let y (-(runresult item 3 points))    ; 2  ; 3
  let z runresult item 2 points          ; 3   ; 2
  
  ;set y (y - y * 2)   ;  y <= -y
  
  
   set x ((x * scale) + offsetX)
   set y ((y * scale) + offsetY)
   set z ((z * scale) + offsetZ)
    
  create-vertices 1 [
    set hidden? true
    set heading 0
    set pitch 0
    set roll 0
    set color white
    set original-x x
    set original-y y 
    set original-z z
    let the-vertex self
    ask current-object [
      set object-vertices lput the-vertex object-vertices
    ]

   
    setxyz x y z
    set size scale
  ]
end

to parse-face [points]
  let vertices-in-surface (length points) - 1
  
  let val1 (runresult until "/" item 1 points) ; 1 ; 1
  let val2 (runresult until "/" item 2 points) ; 2 ; 3
  
  ;set val2 (val2 - val2 * 2)   ;  val <= -val
  
  let val3 (runresult until "/" item 3 points) ; 3 ; 2
  
  ;set val1 ((val1 * scale))
  ;set val2 ((val2 * scale))
  ;set val3 ((val3 * scale))
  
  let a-index (val1 - 1)  
  let b-index (val2 - 1)  
  let c-index (val3 - 1)  ;
    
  create-triangles 1 [
    set hidden? true
    set triangle-a [item a-index object-vertices] of current-object
    set triangle-b [item b-index object-vertices] of current-object
    set triangle-c [item c-index object-vertices] of current-object
    

    connect-vertices
    ask current-object [
      set object-triangles lput myself object-triangles
    ]
  ]  
  if vertices-in-surface = 4 [
    let val4 (runresult until "/" item 4 points)
  
    ;set val4 (val4 * scale)  
      
    let d-index (val4 - 1)    
    create-triangles 1 [
      set hidden? true
      set triangle-a [item a-index object-vertices] of current-object
      set triangle-b [item c-index object-vertices] of current-object
      set triangle-c [item d-index object-vertices] of current-object
      connect-vertices
      ask current-object [
        set object-triangles lput myself object-triangles
      ]
    ]        
  ]
end

to connect-vertices
  ask triangle-a [    
    create-edge-with [triangle-b] of myself [
      set color get-color-for-edge self
    ]   
  ]  
  ask triangle-b [
    create-edge-with [triangle-c] of myself [
      set color get-color-for-edge self
    ]      
  ]  
  ask triangle-c [
    create-edge-with [triangle-a] of myself [
      set color get-color-for-edge self
    ]       
  ]      
end
