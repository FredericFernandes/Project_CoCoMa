extensions[table goo]
__includes ["libs/bdi.nls" "libs/communication.nls" "libs/archi.nls" "libs/intentions.nls" "libs/Tools.nls" "libs/scale.nls"]
breed [waypoints waypoint]
breed [envconstructors envconstructor]
breed [convois convoi]
breed [enemies enemie]
breed [missiles missile]
breed [drones drone]
breed [cercles cercle]
breed [HQs HQ]
directed-link-breed [path-links path-link]
undirected-link-breed [dummy-links dummy-link]
directed-link-breed [convoi-links convoi-link]
directed-link-breed [red-links red-link]
directed-link-breed [blue-links blue-link]



globals [mapAlt solAlt basseAlt hauteAlt ; variables topologiques Z discretise: definit le niveau ou se trouvent toutes les informations de la carte (obstacles base etc.) car en 2D, niveau au sol ou se trouvent les agents, niveau basse altitude et niveau haute altitude
  base-patches base-entry base-central ; precache: definit ou se trouvent les patchs de la base d'atterrissage, le patch d'entree sur la piste d'atterrissage, et le patch ou doivent s'arreter les drones pour se recharger. Permet d'evaluer rapidement la distance et les besoins des drones (quand ils doivent rentrer a la base)
  as-cost as-path ; variables globales pour les chemins AStar: le cout d'un pas sur un patch, et as-path est la liste des plans, un pour chaque convoi leader
  max-fuel max-ammo ; fuel and ammo for drones.
  fuel-dec ; how much fuel will be decremented at each iteration
  mission-completed? mission-failed?
  send-interval ; communication period
  is-movie-recording?

  ;Optimisation A*
  first-time
  patch-used

  range-com ; en distance patch
  start? ;placer a true lorsque tout les drones ont décollés

  pos-decollage-x pos-decollage-y pos-avt-decollage-x pos-avt-decollage-y


  full-ammo ;Set le nombre max de munition transportable
 ]



turtles-own [
  beliefs
  intentions
  incoming-queue
]


patches-own [obstacle? base? hangar? objectif? bridge? marker-goal? ; variables topologiques au niveau mapAlt, permet de definir les patchs praticables et ceux qui sont des obstacles
  as-closed as-heuristic as-prev-pos ; variables temporaires pour calculer les chemins AStar (effaces a chaque calcul de plan)
  ]
convois-own[;incoming-queue
  finished? ; Is the goal reached ?
  leader?   ; car leading the convoi convoi
  to-protect? ; Should this car be protected at all cost ?
  genlongpath? ; Should the leader compute a new path (but not shortest) ?
  dead?
  speed maxdir ; maximal speed of a car, and max angle
  last-send-time ; communication historical time-stamp
  followed?   ;Placé à true si un drone suit le convois
  advanced-followed? ;Placé à true si un drone parcours le chemin du convoi en avance
  path-convoi ; Stockage du chemin du convoi
   pos-enemies ;Liste stockant les positions des ennemies trouvés par les drones
  replan? ;Set à true si le convoi doit replanifier son chemin
  ]

enemies-own[
  tick-shoot
  dead?
  speed maxdir; maximal speed of a car, and max angle
  goal1 goal2
  toward-goal1?  ;set true to go to goal1 set false to go to goal2
  cible ; cible pour le tick en cours , == à "nobody" si pas de cible en cours
  oldVisualRange  ;liste de patches représentant le champ de vision des tortules  ; ( utilisé pour les remettre "vide" au ticks suivant )
  newVisualRange ;liste de patches représentant le champ de vision des tortules
]

missiles-own[
  range
  origin
]

drones-own[
  tick-shoot
  dead?
  take-off? ;true si le drone a décollé
  can-take-off? ; true si le drone peut décoller (le premier drone est init a true le reste a false)
  can-land? ; placer a true si le drone est bien placé ( a quelques patches de la piste d'atterissage et dans le bon sens)
  speed ;vitesse du drone
  comportement ;comportement du drone : 1 suis le convoi, 0 patrouille en avance du convoi (pour l'instant)
  cible ; cible pour le tick en cours , == à "nobody" si pas de cible en cours
  alt ; altitude du drone
  atterissage?
  ;incoming-queue ;Liste pour les message a initialiser à []
  fuel ; essence
  conv-followed
  conv-advanced-followed
  myTurtle;
;  move-up? ; Set to true if the drone is getting high in alt
;  move-down? ; Set to true if the drone is getting down in alt
  as-path-drones
  goal-drone
  cible-enemies
  munitions ;Stocks de munitions
  listEval; resultat des evalutions des intentions
  lastListEval
]

;***********************
;         SETUP
;***********************

to setup
    clear-all
    clear-turtles
    load-shapes-3d "shapes3D/Drone.n3d"
    load-shapes-3d "shapes3D/rayon-com.n3d"
    load-shapes-3d "shapes3D/convoie.n3d"
    load-shapes-3d "shapes3D/tank.n3d"
    set first-time true
    set patch-used []

  ; The setup generates environments until one of them is acceptable (the convoi can accomplish the mission)
  print "***********************"
  print "       SETUP           "
  print "***********************"
  let path-is-possible? false

  while [not path-is-possible?] [
    clear-all
    ;set pos-enemies fput patch 7 15 0 pos-enemies
    if not debug and not debug-verbose [no-display] ; disable gui display to speedup processing, the time slider won't influence the setup procedure
    setup-globals
    setup-env
    clear-turtles ; reinit the id of the agents
    setup-convois ;
    set start? false
    ifelse nb-cars <= 0 [
      set path-is-possible? true
    ]
    ; generate a path and check is the convoi can reach its destination. If not, generate a new env
    [
      let start-path (plan-astar ([[patch-at 0 0 (pzcor * -1)] of patch-here] of one-of convois with [leader?]) (one-of patches with [objectif?]) false false true [])
      set as-path replace-item 0 as-path start-path
      if not empty? start-path [ set path-is-possible? true]
    ]
  ]



  if not debug and not debug-verbose [no-display]
  setup-drones
  setup-enemies

  ;setup-citizens
;  setup-hq
  setup-precache
  display ; reenable gui display
  clear-all-plots
  update-shooser
  reset-ticks
end

; Initial parameters
to setup-globals
  set mapAlt 0
  set solAlt 1
  set basseAlt floor (max-pzcor / 3 * 2 - 1)
  ;show word "basse Altitude : " basseAlt
  set hauteAlt floor (max-pzcor - 1)
  ;show word "haute Altitude : " hauteAlt
  set mission-completed? false
  set mission-failed? false
  set full-ammo 5
  set as-cost 1 ; cost to move
  set as-path n-values nb-cars [[]] ; max one path for each car

  set send-interval 10 ; in number of steps
 ; set dist-R-set []

  set is-movie-recording? false
  ;set max-fuel 1000

  set max-fuel (max-pxcor * max-pycor) / 2.5


  set fuel-dec 1
end


; Precaches places en global variables for static components in order to speed-up the processes.
to setup-precache
  set base-patches (patches with [base? and pzcor = mapAlt]) ; precache to speedup things
  set base-entry max-one-of (base-patches with-min [pycor]) [pxcor]
  set base-central min-one-of (base-patches with-min [pxcor]) [pycor]

  init-global-scale
end


;environment definition
to setup-env
  ask patches [set obstacle? false set base? false set hangar? false set objectif? false set bridge? false set marker-goal? false]

  ; Herbe
  ask patches with [pzcor = mapAlt][set pcolor green + (random-float 2) - 1]



  ; Rivieres
  if nb-rivers > 0 [
    repeat nb-rivers [
      ; A builder will move and create a river at each step
      create-envconstructors 1 [
        ; random deploy on the left side or on the bottom one
        ifelse random-float 1 <= 0.5 [
          set xcor 0
          set ycor random max-pycor
          set heading 90
        ]
        [
          set ycor 0
          set xcor random max-pxcor
          set heading 0
        ]
        set zcor mapAlt

        ; Tag of the first case
        ask patch-here [set pcolor blue set obstacle? true]

        ; move and mark the patch
        repeat max-pxcor + max-pycor [
          ; Change l'orientation aleatoirement
          rt random 30 - 15
          ; one step
          fd 1
          ; randomly select a bridge or a river
          ask patch-here [
            ; bridge
            ifelse random-float 1 <= 0.1 [
              set pcolor brown
              set bridge? true
            ]
            ; River
            [
              set pcolor blue
              set obstacle? true
            ]
          ]
        ]
        die
      ]
    ]
  ]

  ; Lacs
  if nb-lakes > 0 [ ask n-of nb-lakes patches with [pzcor = mapAlt and pxcor > 7 and pycor > 7] [ask patches with [distance-nowrap myself < 4 and pzcor = mapAlt] [set pcolor blue set obstacle? true]] ]

  ; Hangar (la ou les voitures du convois demarrent)
  ask patches with[pzcor = mapAlt and pxcor >= 5 and pxcor < 7 and pycor >= 0 and pycor < 12][set pcolor 8 set hangar? true set obstacle? false]

  ; Base de decollage et atterrissage pour les drones
  ask patches with[pzcor = mapAlt and pxcor >= 3 and pxcor < 5 and pycor >= 0 and pycor < 12][set pcolor 1 set base? true set hangar? false set obstacle? false] ; piste verticale
  ask patches with[pzcor = mapAlt and pycor = 0 and pxcor >= 0 and pxcor < 18][set pcolor 1 set base? true set hangar? false set obstacle? false] ; piste horizontale
  ; Batiment (pour faire joli, ne sert a rien fonctionnellement)
  ask patches with[pzcor <= solAlt and pxcor >= 0 and pxcor < 3 and pycor >= 0 and pycor < 5][set pcolor 3 set obstacle? true set base? false set hangar? false] ; Batiment
  ask patches with [pzcor < 5 and pxcor = 0 and pycor = 0 and pzcor > 0 ] [ set pcolor 3 set obstacle? true set base? false set hangar? false] ; Antenne

  ; Copie des obstacles: on s'assure que les patchs au niveau solAlt ont la meme valeur obstacle? que leur patch en-dessous au niveau mapAlt (assure que enemy-random-move fonctionne bien et facilite la detection des obstacles car pas besoin de regarder au niveau mapAlt mais directement dans les patchs solAlt)
  ask patches with [[obstacle?] of patch-at 0 0 -1] [set obstacle? true]


  ; Montagnes
  let nb-Montagne-create 0
  let continu true
  while [continu and nb-Montagne-create != max-nb-mountains]
  [
    set continu create-Montagne
    if continu [
      set nb-Montagne-create nb-Montagne-create + 1
    ]
  ]
  print (word "Il y a " nb-Montagne-create " montagne(s) de crée(s).")


  ask patches with [[obstacle? and pzcor = solAlt] of patch-at 0 0 1] [set obstacle? true]

    ; Objectif
  ask one-of patches with[obstacle? = false and base? = false and hangar? = false and pxcor >= (max-pxcor / 2) and pycor >= (max-pycor / 2) and pzcor = mapAlt][set objectif? true ask patch-at 0 0 2 [set pcolor yellow set marker-goal? true]]

  set pos-decollage-x ((min [pxcor] of (patches with [hangar? and pzcor = mapAlt])) - 2)
  set pos-decollage-y ((min [pycor] of (patches with [hangar? and pzcor = mapAlt])))
  set pos-avt-decollage-x ((max [pxcor] of (patches with [hangar? and pzcor = mapAlt])) - 2)
  set pos-avt-decollage-y ((max [pycor] of (patches with [hangar? and pzcor = mapAlt])) + 5)
end

to-report create-Montagne
  let centre no-patches  ; centre de la montagne
  let voisinsOfCentre [] ; liste de patch composant la montagne
  let correct false
  let nbMaxIterration 100
  while [(not correct) and (nbMaxIterration != 0)][
    set centre one-of patches with [patchIsGround?] ; on tire un nouveau centre de montagne aléatoire
    set voisinsOfCentre (patches with [(distance-nowrap centre < basseAlt ) and  not (pzcor = 0)  ]) ; on récupérer les voisins de "centre"
    set correct (all? voisinsOfCentre [patchIsAir? and ([not obstacle? and not base? and not hangar?] of patch-at 0 0 -1) ]) ; continu est vrai si tous les patches de "voisinsOfCentre" sont libres ( pas d'obstacle , pas de base , etc ... )
    set correct (correct and not (all? voisinsOfCentre [pxcor < (max-pxcor / 3) and pycor <= (max-pycor / 3) ]))
    set nbMaxIterration nbMaxIterration - 1
  ]
  if correct [
    ; on vient de trouver une montagne avec assez d'espace autour
    ask voisinsOfCentre [
      set pcolor brown - 1
      set obstacle? true
    ]
  ]
  report correct
end


to setup-convois
  if nb-cars = 0 [stop]

  ; get the size of the base to deploy the car accordingly
  let base-min-pxcor min [pxcor] of (patches with [hangar? and pzcor = mapAlt])
  let base-max-pxcor max [pxcor] of (patches with [hangar? and pzcor = mapAlt])
  let base-min-pycor min [pycor] of (patches with [hangar? and pzcor = mapAlt])
  let base-max-pycor max [pycor] of (patches with [hangar? and pzcor = mapAlt])

  ; creation des voitures du convoi et cortege
  create-convois nb-cars
  ask convois
  [
    ; Init apparence NetLogo
    set shape "convoie"
    set color magenta
    set size 1
    ; Init des structures BDI
    set incoming-queue [] ; Do not change

    ; Init vars convois
    set speed 0.05 * simu-speed
    set maxdir 10 * simu-speed
    set heading 0
    set roll 0
    set pitch 0
    set finished? false
    set leader? false
    set to-protect? false
    set genlongpath? false
    set dead? false
    set replan? false
    set followed? false
    set advanced-followed? false
    set path-convoi []

    set pos-enemies []
    ; Visu
    set label who ; display the car names
  ]

  ; get the id of the first one
  let first-car min [who] of convois
  let last-car max [who] of convois

  ; configure the leader
  ask convoi first-car [
    set leader? true
    set color orange
    move-to patch base-max-pxcor base-max-pycor 1
  ]

  ; configure the last car as the critical one
  ask convoi last-car [
    set to-protect? true
    set color yellow
  ]

  ; deploying the other car
  if nb-cars > 1 [
    ; ask non leader cars
    ask turtle-set sort-on [who] convois with [who > first-car]
    [
      ; we create a link between them
      create-convoi-link-to turtle (who - 1)
      ;if who >= 4 and who mod 2 = 0 [ create-convoi-link-with turtle (who - 3) ]

      ; deploying
      ifelse (who - 1) mod 2 = 0
      [ set xcor base-min-pxcor ]
      [ set xcor base-max-pxcor ] ; a gauche ou a droite selon le nombre (pair ou impair respectivement)
      set ycor base-max-pycor - (floor (who / 2) / (nb-cars / 2) * (base-max-pycor - base-min-pycor)) ; d'une rangee de plus en plus basse toutes les deux voitures
      set zcor solAlt
    ]

  ]
end


;------------------------------------------------------------
;------------- functions ------------------------------------
;------------------------------------------------------------

; Plannification AStar d'un patch start vers un patch goal
; Note: si l'heuristique est consistante/monotone (comme distance euclidienne/vol d'oiseau), h = 0 revient a faire Djikstra
; Note2: on l'utilise avec le convoi mais on peut l'utiliser avec n'importe quel agent, c'est generique.
; Note3: limite en 2D pour cette application mais on peut facilement la modifier pour accepter la 3D (enlever les limites with [pzcor ...])
to-report plan-astar [start goal longpath? for-drone? first-time? tab-pos-enemies] ; start et goal sont des patchs

  ; Desactivation du refresh GUI (car calculs internes): Pour etre plus rapide, on dit a NetLogo qu'il peut calculer toute cette fonction sans avoir a updater le GUI (que des calculs internes), comme ca le slider de vitesse n'influencera pas la vitesse de ce code (sinon en slower ca met vraiment beaucoup de temps)
  if not debug-verbose or for-drone? [no-display]
  ; INIT
  ; Ajustement du niveau du but par rapport au start, car le plan est en 2D ici
  let start-pzcor [pzcor] of start
  set goal [patch-at 0 0 ([pzcor] of start - [pzcor] of goal)] of goal

  ; (Re)init des variables AStar sur tous les patchs
  ;let closed n-values world-height [n-values world-width [0]]


;  ifelse (first-time?)[
    ask patches [
      set as-closed 0 ; sert a savoir si ce patch a deja ete visite. 0 = non visite, 1 = deja visite (et on visite en premier par le chemin optimal comme Djikstra, donc si un noeud a deja ete visite, on est sur qu'il est inutile de le revisiter par un autre chemin puisqu'il sera moins optimal que le premier chemin qui a conduit a ce patch - ceci est assure car on utilise la distance euclidienne a vol d'oiseau qui est une heuristique consistante/monotone, pas juste admissible)
                      ;    set as-heuristic astar-faster * distance-nowrap goal ; si astar-faster > 1 alors on utilise Weighted AStar, ou le chemin est suboptimal avec une limite de cout au plus astar-faster fois supérieur au cout du chemin optimal. (eg: astar-faster = 2 signifie que le chemin sera au pire deux fois moins optimal au pire). Note: si astar-faster = 0 alors h = 0 pour tous les patchs et ca revient à l'algo de Dijkstra.
    ]
;    set first-time false
;  ]
;  [
;    foreach patch-used[ask ?[set as-closed 0]]
;    ]
  set patch-used []


  ; Init de l'algo en utilisant le patch de depart
  let pos start
  set patch-used fput pos patch-used

;  let h [as-heuristic] of start
  let h [ astar-faster * distance-nowrap goal] of start



  let g 0
  let f (g + h)

  ; Init de la liste open (la liste des patchs a explorer) du type [f, g, h, position du patch]
  let open (list (list f g h pos))

  ; Init des criteres d'arret
  let found false ; si un chemin a ete trouve
  let resign false ; si aucun chemin ne peut etre trouve (plus rien dans la liste open)
  let counter 0 ; si on a visite trop de patchs et que la recherche met trop de temps




  if is-list? tab-pos-enemies and not empty? tab-pos-enemies[
    foreach tab-pos-enemies[
      ask ?[
        ;      print "OK"
        set obstacle? true
      ]
    ]
  ]



  while [not found and not resign] [

    ; Critere d'arret si echec (plus de patch a visiter ou trop de patchs deja visite)
    ifelse empty? open or (astar-max-depth > 0 and counter > astar-max-depth) [
      set resign true
    ]
    [
      ; Incremente le counter
      set counter counter + 1

      ; On reorganise la liste open pour toujours visiter le meilleur patch candidat en premier (celui qui maximise f)
      set open sort-by [item 0 ?1 < item 0 ?2] open
      ; Cas particulier: on visite le plus mauvais patch, celui qui minimise f, pour maximiser la longueur du chemin (cool pour tester les drones car l'environnement reste relativement petit)
      if astar-longpath or longpath? [set open reverse open]
      ; Autre cas particulier: on visite le chemin au hasard, permet aussi de construire un long chemin (mais moins long) et plus rapidement. C'est un compromis entre l'optimal et la longueur.
      if astar-randpath [set open shuffle open]

      ; Pop un element de la liste, le meilleur candidat
      let next first open
      set open but-first open
      set pos item 3 next
      set g item 1 next

      ; Dessin en live du chemin parcouru par astar
      if debug-verbose [
      wait 0.01
      ask pos [ set pcolor red ]
      ]

      set patch-used fput pos patch-used
      ; Critere d'arret si reussite: on est sur le but donc on a trouve un chemin
      ifelse pos = goal [
        set found true
      ]
      ; Sinon on va explorer les voisins du patch en cours
      [
        ; Expansion du meilleur candidat (expansion = on ajoute les voisins dans la liste open, des noeuds a visiter)
        ask [neighbors6-nowrap with [pzcor = start-pzcor and as-closed = 0 and not obstacle? and not base?]] of pos [ ; On ne visite que les voisins au meme niveau (astar en 2D, mais on peut etendre ici au 3D facilement!) ET on ne l'a pas deja visite (as-closed = 0) ET il n'y a pas d'obstacle sur ce patch
          ; Calcul du score f de ce voisin
          let g2 g + as-cost
          let patch-courant patch pxcor pycor 0
          ;let h2 as-heuristic
          let h2 astar-faster * distance-nowrap goal
;          if is-list? tab-pos-enemies and not empty? tab-pos-enemies[
;;            foreach tab-pos-enemies[
;;              if patch-courant = ?[
;;                print "OK"
;;                set g2 (g2 + 10)
;;              ]
;
;;              ask ? in-radius-nowrap 10 [
;;                 print "OK"
;;               ; if patch-courant = ?[
;;
;;                ;  set h2 (h2 + 1000)
;;               ; ]
;;              ]
;            ]
;          ]

          let f2 g2 + h2

          ; Ajout dans la liste open des patchs a visiter
          set open lput (list f2 g2 h2 self) open

          ; Ajout des meta-donnees sur ce patch
          ;set as-closed min (list ((as-closed + 1) ([as-closed] of pos + 1)) ; Pas necessaire car on est sur qu'on ne visite qu'une fois un noeud dans open, ensuite on lui attribue un nombre dans closed et donc on ne l'ouvrira plus jamais
          set as-closed ([as-closed] of pos + 1) ; pour savoir que ce patch a deja ete visite + faire astar-visu-more
          set as-prev-pos pos ; pour backtracker ensuite et trouver le chemin qui mene au but
        ]
      ]
    ]
  ]

  if is-list? tab-pos-enemies and not empty? tab-pos-enemies[
    foreach tab-pos-enemies[
      ask ?[
        ;      print "OK"
        set obstacle? false
      ]
    ]
  ]
  if (debug and not for-drone?) [print (word "found:" found " - resign:" resign)]

  ; Visualisation de tous les noeuds explores en coloriant selon quand ca a ete explore (score as-closed)
  if (astar-visu-more and not for-drone?) [
    let max-closed max [as-closed] of patches with [pzcor = start-pzcor] ; Récupère la valeur tdval max entre tous les patchs
    let min-closed min [as-closed] of patches with [pzcor = start-pzcor] ; Idem pour min tdval
    if (max-closed != min-closed) [ ; Si on a au moins appris quelquechose (sinon tous les patchs auront la même couleur, ce n'est pas intéressant)
      ask patches with [pzcor = start-pzcor] [
        if debug [set plabel precision as-closed 1]
        set pcolor (61 + ((as-closed - min-closed) / (max-closed - min-closed)) * 9 )
      ]
    ]
  ]

  ; Extraction du chemin par marche inverse, depuis le goal vers start (grace a as-prev-pos qui memorise depuis quel patch on est arrive a celui en cours, et donc le chemin le plus court puisque l'algo garantie que la premiere exploration est toujours optimale)
  let path []
  if not resign [
    ; On commence du but, goal
    set pos goal
    set path lput pos path

    ; Pour la visualisation du chemin, init du premier waypoint
    if astar-visu [
      if any? waypoints [
        ask waypoints [ die ]
      ]
      create-waypoints 1 [
        hide-turtle
        move-to [patch-at 0 0 1 ] of goal ]
    ]

    ; Tant qu'on a pas reconstruit tout le chemin vers le debut, start
    ; On va a chaque fois recuperer le noeud parent avec as-prev-pos
    while [pos != start] [

      ; Visualisation du chemin, on ajoute un lien entre le parent et le noeud en cours
      if (astar-visu  and not for-drone?) [
        create-waypoints 1
        [
          hide-turtle
          move-to [patch-at 0 0 1 ] of ([as-prev-pos] of pos)
          create-path-link-to one-of waypoints-on [patch-at 0 0 1 ] of pos
          [
            set color red
            set shape "test"
            show-link
          ]
        ]
      ]

      ; Construction inverse du chemin, on ajoute le noeud parent dans le chemin et on va l'explorer
      ;set pos [min-one-of neighbors6-nowrap [as-closed]] of pos
      set pos [as-prev-pos] of pos
      set path lput pos path
    ]

    ; Chemin construit, on inverse la liste pour qu'elle soit de start a goal au lieu de l'inverse
    set path reverse path
    set path but-first path ; on enleve le premier patch, qui est celui sur lequel on est deja
  ]

  ; Reactivation du refresh GUI
  display

  ;On reinit le tableau d'ennemies détéctés


  ; Et on retourne le chemin complet (ou une liste vide si on n'a rien trouve)
  report path
end


; Return the 6 neighbours without the world wrap
to-report neighbors6-nowrap
; reports neighbors-nowrap-n or the indicated size
report neighbors6 with
[ abs (pxcor - [pxcor] of myself) <= 1
  and abs (pycor - [pycor] of myself) <= 1
]
end


;-----------
;  CONVOIS
;-----------

; Procedure principale de gestion des convois
to convois-think

  if nb-cars = 0 [stop]

  let first-car min [who] of convois

  ; Calcul du plan AStar pour chaque leader si necessaire
  foreach sort-on [who] turtle-set convois with [leader? and not finished? and not dead?]
  [
    let id ([who] of ?) - first-car
    ; Recalcule le chemin si nécessaire (par exemple au début de la simulation ou quand le convoi se sépare)
    ; Note: on est oblige de le faire en dehors du ask sinon on ne peut pas acceder a tous les patchs
    if empty? as-path or length as-path < (id + 1) or empty? (item id as-path) or [replan?] of ? [ ; s'il n'y a pas encore de chemin du tout, ou pas de chemin pour cette voiture, on cree un plan AStar

      print "replan"
      ; Cree le plan AStar (attention a ca que le patch start soit au niveau ou il y a les obstacles, ici pzcor = mapAlt pour les obstacles)
      let start-patch min-one-of (patches with [pzcor = mapAlt and not obstacle?]) [distance ?] ; on s'assure de choisir comme patch de depart un patch libre sans obstacle, sinon quand on split un convoi il se peut qu'il soit sur un obstacle et qu'il ne puisse jamais generer de chemin
      let new-path []
      ifelse not [replan?] of ? [
        set new-path plan-astar ([patch-at 0 0 (pzcor * -1)] of start-patch) (one-of patches with [objectif?]) ([genlongpath?] of ?) false false []
      ]
      [
        set new-path plan-astar ([patch-at 0 0 (pzcor * -1)] of start-patch) (one-of patches with [objectif?]) false false false [pos-enemies] of ?

      ]
     ; let new-path plan-astar ([patch-at 0 0 (pzcor * -1)] of start-patch) (one-of patches with [objectif?]) tmp-longpath false false




      ; S'il n'y a pas de plan et qu'on a essayé de trouver un long chemin, on attend la prochaine iteration et on reessaie mais avec un plan court
      if empty? new-path and [genlongpath?] of ? [ ask ? [ set genlongpath? false ] ]
      ; S'il n'y a pas deja une entree pour cette voiture on la cree
      ifelse length as-path < (id + 1) [
        set as-path lput new-path as-path
      ]
      ; Sinon on remplace l'entree pour cette voiture par le nouveau plan
      [
        set as-path replace-item id as-path new-path
      ]
          if [replan?] of ?[
      ask ?[
        set pos-enemies []
        set replan? false
        ]
    ]
    ]

  ]

  ; Deplacement des leaders sur le chemin AStar
  ask convois with [leader? and not finished? and not dead?] [ ; Tant qu'on n'a pas atteint le but
    ;move-convoi-naive ; deplacement naif sans AStar
    if followed?[
      ; Recupere le plan AStar
      let my-as-path item (who - first-car) as-path
      ; print length my-as-path
      if not empty? my-as-path [
        ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
        let next-patch first my-as-path
        let zz pzcor
        set next-patch [patch-at 0 0 (zz - pzcor)] of next-patch ; mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
                                                                 ; Deplacement vers le prochain waypoint
        if next-patch != patch-here [move-convoi next-patch false false]
        ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
        if patch-here = next-patch [
          set my-as-path remove-item 0 my-as-path
          set as-path replace-item (who - first-car) as-path my-as-path
          if debug [ show (word "Waypoint atteint: " patch-here ", prochain: " next-patch ) ]
        ]
      ]

      set path-convoi as-path
      ;    print as-path
      ; Critere d'arret: on est a cote de l'objectif
    ]
      check-convoi-finished

  ]

  ; Deplacement des voitures-cortege: elles ne font que suivre la voiture devant eux (avec laquelle elles sont liées)
  ask convois with [not leader? and not finished? and not dead?] [
    ifelse any? my-out-convoi-links
    [
      move-convoi ([patch-here] of one-of out-convoi-link-neighbors) true true
    ]
    ; S'il n'y a pas de lien devant, c'est probablement que la voiture est morte, donc on devient leader
    [
      set leader? true
      set genlongpath? true
      if not to-protect? [ set color orange ]
    ]
  ]
end

to-report detect-obstacle
 if any? other patches in-cone 10 60 with [obstacle?] [report true]
; if any? other patches in-cone 10 90 [report true]
; if any? other patches in-cone 3 270 [report true]
 report false
end

to turn-away
   ;let free-patches neighbors with [not any? patches ]
   ;if any? free-patches [face one-of free-patches]
   rt random 10 - 5
end

to check-convoi-finished
  ; Critere d'arret: on est a cote de l'objectif
  ; Note: on veut etre a cote de l'objectif et pas directement dessus car on est une voiture, donc il se peut qu'on tourne indefiniment autour sans arriver directement a arriver dessus a cause de la limite d'angle de rotation.
  if any? [neighbors6-nowrap with [objectif?]] of patch-here [ ; On ne bouge pas si on est arrive au but!
                                                               ; Fini pour le leader
    set finished? true
    ; Fini aussi pour toutes les voitures-cortege qui suivent ce leader
    let linked-cars (list in-convoi-link-neighbors)
    while [not empty? linked-cars] [ ; on fait une boucle pour recursivement mettre a finished? = true toutes les voitures liees entre elles dans ce cortege
      let next-linked-cars []
      foreach linked-cars [
        ask ? [
          set finished? true
          if any? in-convoi-link-neighbors [ ; on recupere les voitures-cortege liees a la voiture-cortege en cours
            set next-linked-cars lput in-convoi-link-neighbors next-linked-cars
          ]
        ]
      ]
      set linked-cars next-linked-cars
    ]
  ]
end

; Avancer une voiture
; Permet de faire avancer les voitures d'un convoi (cortege et leader)
; Maintien egalement une petite distance afin de ne pas "rentrer" dans la voiture de devant
to move-convoi [goal slowdown? cortege?]
  ;show (word "ici:" patch-here " goal:" goal)

  ; Calcule de l'angle avec la cible
  let headingFlag heading
  ifelse cortege?
  [ set headingFlag (towards goal) ] ; Si c'est un cortege, on veut qu'il suive toujours le leader par le chemin le plus court (surtout en play-mode ou le joueur n'est pas limite par le nowrap)
  [ set headingFlag (towards-nowrap goal) ]
  let dirCorrection subtract-headings headingFlag heading
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  ; Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > maxdir [ ; limite a droite
    set dirCorrection maxdir
  ]
  [
    if dirCorrection < maxdir * -1 [ ; limite a gauche
      set dirCorrection maxdir * -1
    ]
  ]

  ; On tourne
  rt dirCorrection

  ; Limite de vitesse pour les voitures-cortege (pour pas qu'elles ne rentrent dans la voiture leader)
  let tmp-speed speed
  if slowdown? [
    if distance-nowrap goal < 1.1 + 1.5[
      set tmp-speed tmp-speed / 20
    ]
    if distance-nowrap goal < 0.9 [
      set tmp-speed 0
    ]
  ]

  ; Deplacement!
  set pitch 0 ; make sure there's no pitch ever, else the car will disappear in the ground
  fd tmp-speed ; Avance
end



to setup-enemies
  if nb-enemies = 0 [ stop ]
  ; creation des enemies
  create-enemies nb-enemies [
    ; Init apparence NetLogo
    set shape "tank"
    set color [204 0 0]
    ; Init vars enemies
    set speed 0.05 * simu-speed
    set maxdir 10 * simu-speed
    set heading 0
    set roll 0
    set pitch 0
    set dead? false
    set tick-shoot 0
    set label-color one-of base-colors
    set label who

    set goal1 enemiePatchSpawn
    ask goal1 [
      set plabel-color [label-color] of myself
      set pcolor [0 0 0 100]
      set plabel (word "A" [who] of myself)
      set marker-goal? true
    ]
    move-to goal1
    set goal2 enemiePatchSpawn
    ask goal2 [
      set plabel-color [label-color] of myself
      set pcolor [0 0 0 100]
      set plabel (word "B" [who] of myself)
      set marker-goal? true
    ]
    set toward-goal1? false
    set cible nobody
    set oldVisualRange no-patches
    set newVisualRange no-patches
    set size 1
  ]

end

;; Fonction qui retourne un patch potentiel pour spawn ou pour objectif de la patrouille
to-report enemiePatchSpawn
   let posX 0
   let posY 0
   let found? false
   let patchFound no-patches
   while[not found?] [
     set posX random-xcor
     set posY random-ycor
     ask patch posX  posY 0[
         if patchIsGround? and (posX >= (max-pxcor / 3) or posY >= (max-pycor / 3)) [
           ; test si la case est une case d"herbe et qu'elle ne soit pas trop prés de la base.
           set found? true
           set patchFound (patch posX posY 1)]
       ]
   ]
   report patchFound
end

;; Fonction utilisé dans un contexte de patch , et elle teste si le patch est une case de type sol
to-report patchIsGround?
     report ( pzcor = mapAlt and not obstacle? and not base? and not hangar? and not objectif? and not marker-goal?)
end

;; Fonction utilisé dans un contexte de patch , qui teste si le patch est une case vide de type air
to-report patchIsAir?
  report ( not (pzcor = mapAlt) and not obstacle? and not base? and not hangar? and not objectif? and not bridge? and not marker-goal? )

end

to check-convoi
  foreach sort-on [who] turtle-set convois with [leader?] [
    ;print pos-enemies
    ask convois [
      if dead? [
       set color 0
       ask my-links [die]
      ]
      ifelse all? drones [out-red-link-neighbor? ? = false] [
       set followed? false
      ]
      [
        set followed? true
      ]

      ifelse all? drones [out-blue-link-neighbor? ? = false] [
       set advanced-followed? false
      ]
      [
        set advanced-followed? true
      ]
      while [not empty? incoming-queue][
        let patch-en fput item 0 item (position "content:" item 0 incoming-queue + 1 ) get-message pos-enemies
;        ask item 0 patch-en [
;          ask neighbors [
;            set pcolor red
           set pos-enemies fput [patch pxcor pycor pzcor] of [neighbors] of item 0 patch-en pos-enemies
;           ask [neighbors] of item 0 patch-en[
;             set pcolor red
;           ]
;          ]
;        ]

          set pos-enemies patch-en
      ]


      ifelse not empty? pos-enemies[
        set replan? true
        ;print "replan to true"
      ]
      [
        set replan? false
      ]
      if finished?[
        hide-turtle



      ]
    ]
  ]
 end



to move-enemies
  no-display
  ask enemies
  [
    ifelse dead? [
       set color 0
       ask my-links [die]
      ]
    [
      let goal goal1
      if (not toward-goal1?) [set goal goal2]
      let headingFlag (towards-nowrap goal)
      let dirCorrection subtract-headings headingFlag heading
      ;Arrondissement de l'angle (on ne veut pas faire de micro tournant)
      set dirCorrection precision dirCorrection 2
      ;Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
      ifelse dirCorrection > maxdir [ ; limite a droite
        set dirCorrection maxdir
      ];else
      [
        if dirCorrection < maxdir * -1 [ ; limite a gauche
          set dirCorrection maxdir * -1
        ]
      ]
      ;On tourne
      rt dirCorrection

      ; Deplacement!
      set pitch 0 ; make sure there's no pitch ever, else the car will disappear in the ground
      fd speed ; Avance
      if patch-here = goal
      [ ; On change de goal si on  arrive au but! (pour l'instant patrouille entre deux goals) (aléa ensuite)
        ifelse toward-goal1? [set toward-goal1? false] [set toward-goal1? true]
      ]

      ; Détéction des convois
      let targets convois in-cone dist-visibile angle-visibility with [not dead?]
      ifelse any? other targets
      [ ; si il y a un convoi dans notre chant de vision
        set cible one-of targets ; mise à jours de la cible
        shoot
      ]
      [; else
        set cible nobody ; mise à jours de la cible
      ]

      ; affiche des champs de visions
      if not (debug-enemies-cone?) [clear-all-cones]
      if debug-enemies-cone? [show-cone]
    ]
  ]
  display

end
; Fonction utilisée dans un contexte de turtles posedant un attribut " cible"
to shoot
  if (ticks - tick-shoot > 30) ; if can shoot
  [
    set tick-shoot ticks
    let dirCorrection 0

    let posX 0
    let posY 0
    let posZ 0
    ask cible [  ; "cible" est un attribut du turtle
       let offsetX (random 3) - 1 ;random  entre [-1 , 1] inclue
       let offsetY (random 3) - 1 ;random  entre [-1 , 1] inclue
       set posX pxcor + offsetX
       set posY pycor + offsetY
       set posZ pzcor
    ]
    let patch_target patch posX posY posZ

    let patch_source patch-here
    hatch-missiles 1
    [
      set shape "line"
      move-to patch_source
      set color yellow
      set size 3
      set label ""
      set origin patch_source
      set range dist-visibile  ; les missiles ne vont pas plus loin que la distance de vue des turtles

      ;on tourne
      face patch_target
    ]
  ]
end

to shoot-drone
  if (ticks - tick-shoot > 30) ; if can shoot
  [
    set tick-shoot ticks
    set munitions (munitions - 1)
    let dirCorrection 0
    let posX 0
    let posY 0
    let posZ 0
    ask cible [  ; "cible" est un attribut du turtle
       set posX pxcor
       set posY pycor
       set posZ pzcor
    ]
    let patch_target patch posX posY posZ

    let patch_source patch-here
    hatch-missiles 1
    [
      set shape "line"
      move-to patch_source
      set color yellow
      set size 3
      set label ""

      set origin patch_source
      set range dist-visibile  ; les missiles ne vont pas plus loin que la distance de vue des turtles

      ;on tourne
      face patch_target
    ]
  ]
end




to move-missiles
    ask missiles
    [
      fd 1
      if distance origin > range [die]
     ; let victime one-of convois-here with [ not dead? ]
       let victime one-of enemies-here with [ not dead? ]
       if victime = nobody [
         set victime one-of convois-here with [ not dead? ]
       ]
      if victime != nobody[
         ask victime [ dealDamage ]
        die
      ]

    ]
end


; Fonction dans un contexte tortue, elle permet de faire des dégats à la tortue ciblé
to dealDamage
   set dead? true
end

;Fonction dans un contexte turtles, qui permet d'afficher le cone de visibilité du turtle ( drones,enemies,convois)
to show-cone

  ;; On recupere les patches qui sont dans le cone de visibilitée de "target", on ne prend que les patches qui sont de "l'aire" ( vide )
  ;;Pour chaque patche trouvé on le colorie en rouge transparent et on le mets dans la liste "newList"
  let  listTmp no-turtles

  ask patches in-cone-nowrap dist-visibile angle-visibility with [patchIsAir?]
  [
    ifelse ([cible] of myself) != nobody[
       set pcolor [255 0 0 45]]
    [; else
       set pcolor [9 106 9 100]]
    ifelse any? listTmp
    [set listTmp (patch-set self listTmp)]
    [set listTmp patch-set self]
  ]
  set newVisualRange listTmp
  let res substract-set newVisualRange oldVisualRange
  ; "res" est un patches-set qui contient la soustraction de oldVisualRange - newVisualRange
  ask res [
    set pcolor [0 0 0 0] ; permet de re-mettre transparent les patches derriere le turtle
  ]
  set oldVisualRange newVisualRange  ;; on utilisera "oldVisualRange" pour le ticks prochain
end

 ;;;;fonction qui supprime les elements de "del-set" dans "curent-set"
to-report substract-set [ del-set curent-set ]
  report curent-set with [not member? self del-set]
end

;;Fonction dans un contexte turtles, qui efface les cones de vision encore sur la map
to clear-all-cones
  ask oldVisualRange[
    set pcolor [0 0 0 0]
  ]
  set oldVisualRange no-patches
end

;-----------
;  DRONES
;-----------

;Setup des drones
to setup-drones

  let base-min-pxcor min [pxcor] of (patches with [hangar? and pzcor = mapAlt])
  let base-min-pycor min [pycor] of (patches with [hangar? and pzcor = mapAlt])

  if (nb-drones = 0) [stop]

  create-drones nb-drones
  ask drones
  [
    ; Init apparence NetLogo
    set shape "drone"
    set color [204 255 229]
    set size 1
    ; Init vars drones
    set speed 0.15 * simu-speed
    set heading 0
    set roll 0
    set pitch 0
    set dead? false
    set take-off? false
    set munitions full-ammo
    set tick-shoot 0
    move-to patch (base-min-pxcor - 2) base-min-pycor 1
    set comportement 0
    set range-com 5
    set can-take-off? false
    set can-land? false
    set atterissage? false
    set label-color white
    set label who ; display the drones names
    set incoming-queue []
    set fuel max-fuel
    set conv-followed nobody
    set conv-advanced-followed nobody
    set cible-enemies nobody
  ;  set comportement (random 2) + 1  ; random de 1 à 2
    if who = min [who] of drones[
      set comportement 0
      set can-take-off? true
      set as-path-drones as-path  ;Exploration chemin en amont du convoi
     ]
     ;print (word "comportement de " who " " comportement)
;    ifelse comportement = 2 [     ;Comportement "tir sur les enemies"
;        set alt (basseAlt - 1)
;      ]
;      [
;        set alt hauteAlt    ;Autres comportements
;      ]


      set alt hauteAlt    ;Autres comportements
      let tmp nobody
      hatch-cercles 1
      [
        set color green
        set size 1 * [range-com] of myself
        set shape "rayon-com"
        move-to myself
        set tmp self
        set label ""
      ]
      set myTurtle tmp

      create-all-intention-drone

  ]
end



;;Déplacement des drones à chaque ticks
;to move-drones
;  no-display
;  foreach sort-on [who] drones[
;    let patch-com patch 0 0 0
;    ask ? [
;      set patch-com patch-here
;      if can-take-off?
;      [
;        ifelse not take-off?[; si le drone n'a pas décollé
;          decollage-drone
;        ]
;        [
;          ifelse (? != last sort-on [who] drones) [
;            ask (drone [who + 1] of ?) [
;              set can-take-off? true
;            ]
;          ][
;            set start? true
;          ]
;        ]
;        if (atterissage?)[
;          atterissage-drone ?
;        ]
;        fd speed / 5
;        fd speed / 10
;
;        ;set fuel fuel - fuel-dec
;
;        let valFuel ((getContent-belief "fuel") - fuel-dec)
;        createBelief "fuel" valFuel
;      ]
;      ask myTurtle [ move-to myself ]
;    ]
;  ]
;  display
;end

;Déplacement des drones à chaque ticks
to move-drones
  no-display
  let patch-com patch 0 0 0
  foreach sort-on [who] drones[
    ask ?
    [
      set patch-com patch-here
      if can-take-off?
      [ ; si le drone a l'autorisation de décoller
        ifelse not take-off?
        [; si le drone n'a pas décollé
          decollage-drone
        ]
        [
          ifelse (? != last sort-on [who] drones)
          [ ; on est pas le dernier drone à décoller
            ask (drone [who + 1] of ?) [
              set can-take-off? true ; le suivant pourra décoller
            ]
          ][
            set start? true
          ]
        ]
        if (atterissage?)[
          atterissage-drone
        ]
        fd speed
        set fuel fuel - fuel-dec

      ]
      ask myTurtle [ move-to myself ]
    ]
  ]
  display
end


;Fonction de décollage des drones ( on fait aller le drone en ligne droite et on modifie son orientation par rapport au sol avec les fonctions tilt-up et tilt-down)
to decollage-drone
  ifelse abs (zcor - alt) > 0.05[
    tilt-up abs (alt - zcor) / 10
  ]
  [
    tilt-down pitch
  ]
  if (round pitch = 0 and zcor - alt > -0.1) [
    set take-off? true ; on est arrivé à une altitude voulu ( alt)
  ]
end



to astar-drone
    if as-path-drones != 0 and not empty? as-path-drones [
      ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
      let next-patch first as-path-drones
;      if not is-list? next-patch[
        set next-patch [patch-at 0 0 0] of next-patch ; mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
                                                      ; Deplacement vers le prochain waypoint
        ;print next-patch
        if next-patch != patch-here [go-to-drone next-patch ]
        ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
        if distance-nowrap next-patch  < (2 + zcor) [set as-path-drones remove-item 0 as-path-drones]

       ; if length as-path-drones = 1 [set as-path-drones item ([who] of conv-advanced-followed - min [who] of convois) as-path]
;      ]
    ]
end


;Dirige le drone vers un patch
to go-to-drone [goal]
  if not take-off? or atterissage?[; On commence les actions uniquement lorsque les drones ont décollé et on stop les actions si on doit attérir
    stop]
  let headingFlag (towards-nowrap goal) ; si on peut(on est au dessus des montagnes) on vole en ligne droite jusqu'a l'objectif
  let dirCorrection subtract-headings headingFlag heading
  if dirCorrection > 10[set dirCorrection 10]
  if dirCorrection < -10[set dirCorrection -10]
  rt dirCorrection
;      if alt = basseAlt[ ; si il y a un obstacle on passe au dessus de la montagne
;        ifelse (obstacle-drone? or move-up?) [up-montagne]
;        [
;          if move-down?
;          [down-montagne
;          ]
;        ]
;      ]
end




;Donne l'ordre au drone de retrouner a la base
to ravitaillement
  ask one-of drones [ set atterissage? true]
end






;Booléen permettant de déterminer si deux agents peuvent communiquer
to-report can-communicate [agent1 agent2]
  let res true
  ask agent1[
    set res distancexy-nowrap ([pxcor] of [patch-here] of agent2) ([pycor] of [patch-here] of agent2) <= range-com
    ;DEtection des montagnes, utiliser patch-is*air et patch-at?

  ]
  report res
end


to send-msg [agent1 agent2]
  if can-communicate agent1 agent2[
    ask agent1[
      let somemsg create-message "inform"
      set somemsg add-receiver agent2 somemsg
      set somemsg add-content "fire-at [23 15]" somemsg
      send somemsg
    ]
  ]


end





to warn-leader[drone-lead]
  ifelse ([conv-followed] of drone-lead) != nobody and not empty? [incoming-queue] of drone-lead[
    if can-communicate drone-lead [conv-followed] of drone-lead[
      ask drone-lead[
        let msg create-message "inform"
        set msg add-receiver conv-followed msg
        set msg add-content item (position "content:" (first [incoming-queue] of drone-lead) + 1) (first [incoming-queue] of drone-lead) msg
        send msg
        remove-msg
      ]
    ]
  ]
  [print "Erreur sur warn leader"]

end


to go

  if(start?)[
    convois-think
    check-convoi

  ]

  move-enemies
  move-missiles
  move-drones
  ;drone-think
  process-bdi-drone
  tick
  drowPlot

    if all? convois with [to-protect?] [not dead? and finished?] [
   user-message (word "The mission is successfull, " count convois with [not dead?]" cars is / are still alive.")
   stop
  ]
  if all? convois with [to-protect?] [dead?] [
   user-message (word "The mission has failed.")
   stop
  ]
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
520
541
-1
-1
10.0
1
10
1
1
1
0
1
1
1
0
50
0
50
0
8
1
0
1
ticks
30.0

SWITCH
15
190
118
223
debug
debug
1
1
-1000

SWITCH
13
235
178
268
debug-verbose
debug-verbose
1
1
-1000

TEXTBOX
13
22
163
40
Environnement \n
12
0.0
1

INPUTBOX
8
38
58
98
nb-cars
3
1
0
Number

BUTTON
342
34
415
67
NIL
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

INPUTBOX
59
37
163
98
max-nb-mountains
5
1
0
Number

INPUTBOX
219
99
271
159
nb-lakes
3
1
0
Number

INPUTBOX
163
38
222
98
nb-rivers
2
1
0
Number

INPUTBOX
576
122
737
182
astar-faster
20
1
0
Number

INPUTBOX
576
196
737
256
astar-max-depth
10000
1
0
Number

SWITCH
384
120
548
153
astar-longpath
astar-longpath
1
1
-1000

SWITCH
384
164
547
197
astar-randpath
astar-randpath
0
1
-1000

SWITCH
381
257
543
290
astar-visu-more
astar-visu-more
1
1
-1000

SWITCH
382
209
545
242
astar-visu
astar-visu
0
1
-1000

SLIDER
538
53
710
86
simu-speed
simu-speed
0
10
1
1
1
NIL
HORIZONTAL

TEXTBOX
10
169
160
187
Debug
12
0.0
1

TEXTBOX
539
37
702
55
Simulation
12
0.0
1

TEXTBOX
374
91
524
109
A*
12
0.0
1

BUTTON
423
34
486
67
NIL
Go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

INPUTBOX
222
38
291
99
nb-enemies
10
1
0
Number

TEXTBOX
129
174
279
192
NIL
12
0.0
1

SWITCH
131
191
347
224
debug-enemies-cone?
debug-enemies-cone?
1
1
-1000

INPUTBOX
9
99
87
159
angle-visibility
45
1
0
Number

INPUTBOX
86
99
159
159
dist-visibile
7
1
0
Number

INPUTBOX
158
99
220
159
nb-drones
1
1
0
Number

SWITCH
775
200
918
233
show-intentions
show-intentions
1
1
-1000

SWITCH
774
161
920
194
show_messages
show_messages
1
1
-1000

TEXTBOX
778
128
928
146
Communication\n
11
0.0
1

PLOT
7
297
595
503
Value1
NIL
NIL
0.0
1000.0
0.0
10.0
true
true
"" ""
PENS
"evalue-random-fly" 1.0 0 -5825686 true "" ""
"evalue-atterissage-drone" 1.0 0 -11085214 true "" ""
"evalue-follow-convoi" 1.0 0 -13791810 true "" ""
"evalue-explore-path-convoi" 1.0 0 -1184463 true "" ""
"evalue-send-pos-enemies" 1.0 0 -16777216 true "" ""

PLOT
599
297
1182
503
Value2
NIL
NIL
0.0
1000.0
0.0
10.0
true
true
"" ""
PENS
"evalue-random-fly" 1.0 0 -5825686 true "" ""
"evalue-atterissage-drone" 1.0 0 -11085214 true "" ""
"evalue-follow-convoi" 1.0 0 -13791810 true "" ""
"evalue-explore-path-convoi" 1.0 0 -1184463 true "" ""
"evalue-send-pos-enemies" 1.0 0 -16777216 true "" ""

CHOOSER
99
512
237
557
Drone1
Drone1
80
0

CHOOSER
716
514
854
559
Drone2
Drone2
80
0

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 165 15 180 60 180 105 285 165 285 195 180 180 165 240 195 270 180 285 150 270 120 285 90 270 135 240 120 180 15 195 15 165 120 105 120 60 135 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

circle-com
false
0
Circle -7500403 false true 44 44 212

convoie
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58
Rectangle -7500403 true true 0 60 60 150
Rectangle -7500403 true true 60 60 75 120

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

drone
true
0
Polygon -7500403 true true 150 0 165 15 180 60 180 105 285 165 285 195 180 180 165 240 195 270 180 285 150 270 120 285 90 270 135 240 120 180 15 195 15 165 120 105 120 60 135 15

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fire
false
0
Polygon -7500403 true true 151 286 134 282 103 282 59 248 40 210 32 157 37 108 68 146 71 109 83 72 111 27 127 55 148 11 167 41 180 112 195 57 217 91 226 126 227 203 256 156 256 201 238 263 213 278 183 281
Polygon -955883 true false 126 284 91 251 85 212 91 168 103 132 118 153 125 181 135 141 151 96 185 161 195 203 193 253 164 286
Polygon -2674135 true false 155 284 172 268 172 243 162 224 148 201 130 233 131 260 135 282

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

person soldier
false
0
Rectangle -7500403 true true 127 79 172 94
Polygon -10899396 true false 105 90 60 195 90 210 135 105
Polygon -10899396 true false 195 90 240 195 210 210 165 105
Circle -7500403 true true 110 5 80
Polygon -10899396 true false 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Polygon -6459832 true false 120 90 105 90 180 195 180 165
Line -6459832 false 109 105 139 105
Line -6459832 false 122 125 151 117
Line -6459832 false 137 143 159 134
Line -6459832 false 158 179 181 158
Line -6459832 false 146 160 169 146
Rectangle -6459832 true false 120 193 180 201
Polygon -6459832 true false 122 4 107 16 102 39 105 53 148 34 192 27 189 17 172 2 145 0
Polygon -16777216 true false 183 90 240 15 247 22 193 90
Rectangle -6459832 true false 114 187 128 208
Rectangle -6459832 true false 177 187 191 208

person soldier (custom)
false
0
Rectangle -7500403 true true 127 79 172 94
Polygon -2674135 true false 105 90 60 195 90 210 135 105
Polygon -2674135 true false 195 90 240 195 210 210 165 105
Circle -7500403 true true 110 5 80
Polygon -16777216 true false 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Polygon -6459832 true false 120 90 105 90 180 195 180 165
Line -6459832 false 109 105 139 105
Line -6459832 false 122 125 151 117
Line -1 false 137 143 159 134
Line -6459832 false 158 179 181 158
Line -6459832 false 146 160 169 146
Rectangle -6459832 true false 120 193 180 201
Polygon -6459832 true false 122 4 107 16 102 39 105 53 148 34 192 27 189 17 172 2 145 0
Polygon -16777216 true false 183 90 240 15 247 22 193 90
Rectangle -6459832 true false 114 187 128 208
Rectangle -6459832 true false 177 187 191 208

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

rayon-com
false
0
Circle -7500403 false true 44 44 212

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

tank
true
0
Rectangle -7500403 true true 144 0 159 105
Rectangle -6459832 true false 195 45 255 255
Rectangle -16777216 false false 195 45 255 255
Rectangle -6459832 true false 45 45 105 255
Rectangle -16777216 false false 45 45 105 255
Line -16777216 false 45 75 255 75
Line -16777216 false 45 105 255 105
Line -16777216 false 45 60 255 60
Line -16777216 false 45 240 255 240
Line -16777216 false 45 225 255 225
Line -16777216 false 45 195 255 195
Line -16777216 false 45 150 255 150
Polygon -7500403 true true 90 60 60 90 60 240 120 255 180 255 240 240 240 90 210 60
Rectangle -16777216 false false 135 105 165 120
Polygon -16777216 false false 135 120 105 135 101 181 120 225 149 234 180 225 199 182 195 135 165 120
Polygon -16777216 false false 240 90 210 60 211 246 240 240
Polygon -16777216 false false 60 90 90 60 89 246 60 240
Polygon -16777216 false false 89 247 116 254 183 255 211 246 211 237 89 236
Rectangle -16777216 false false 90 60 210 90
Rectangle -16777216 false false 143 0 158 105

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270

@#$#@#$#@
NetLogo 3D 5.3.1
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180

test
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Polygon -7500403 true true 150 90 90 210 150 150 210 210 150 90

@#$#@#$#@
0
@#$#@#$#@
